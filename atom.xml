<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>上古清茗</title>
  <subtitle>无文艺不前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-12T08:53:54.365Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>guomeiqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SPA架构下，hash传递UGC类参数时由于编码引发的问题</title>
    <link href="http://yoursite.com/2015/08/21/spa-hash/"/>
    <id>http://yoursite.com/2015/08/21/spa-hash/</id>
    <published>2015-08-21T02:34:12.000Z</published>
    <updated>2016-12-12T08:53:54.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在SPA单页面架构中，通过hash传递name, desc这种UGC字段时，因为无法控制特殊字符导致在解析hash后面的参数时出错。比如:<a href="http://hao.a.com/init.action#main/module/create/~id=12323&amp;name=alsdf@@#$%)^)&amp;@$%" target="_blank" rel="external">http://hao.a.com/init.action#main/module/create/~id=12323&amp;name=alsdf@@#$%)^)&amp;@$%</a></p>
<p>因为目前hash结构是#/page/entity/crud/~param，实际开发中会有通过hash获取参数的需求，尤其在页面直接通过URL定位、刷新或者链接跳转时，因为没有上下文的JS参数传递，如果不借助接口传参的话，则只能通过url去拿参数。</p>
<p>以上说的参数传递问题，理论上是可以通过良好的接口设计来避免，但实际开发中，由于缺乏统一的规范，需要和后端协调商定参数等问题，很难成功推行。因此还需要前端方案自己来保障及时有类似的需求，也可以正确、稳定、安全的传递参数。</p>
<h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><p>系统中的参数传递，一般会涉及到两种：<code>id类</code>，<code>UGC类</code></p>
<ul>
<li>id类是比较常见的参数，一般由数据库生成，后端返回给前端，而且一般是纯数字，结构简单，且不存在安全问题；</li>
<li>UGC类是由用户在系统中输入并存储到DB中的字段，通常会存在xss风险，特殊字符问题等等，属于不安全内容，必须要对该类字段进行有效的处理；</li>
</ul>
<p>UGC类内容的使用场景一般分为两种：</p>
<ul>
<li>从后端取回，显示在界面中</li>
<li>被当成参数，通过url进行传递</li>
</ul>
<p>第一种场景，要注意xss注入的风险，需要对尖括号，或者不安全字符进行escape；或者通过模板库渲染，杜绝手动设置innerHTML，或者jquery.html这种使用方法；</p>
<p>第二种场景的情况比较多：</p>
<ul>
<li>可以通过模板直接生成在a标签上;</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#main/module/crud/~id=&#123;&#123;id&#125;&#125;&amp;name=&#123;&#123;name&#125;&#125;"</span>&gt;</span>新建<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>可以通过js动态赋值到href上</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> id = <span class="number">12</span>;</div><div class="line"><span class="keyword">var</span> name = <span class="string">'帆布鞋'</span>;</div><div class="line"></div><div class="line">$(<span class="string">'#button'</span>).attr(<span class="string">'href'</span>, <span class="string">'#main/module/crud/~id='</span> + id + <span class="string">'&amp;name='</span> + name);</div></pre></td></tr></table></figure>
<ul>
<li>可以直接拼凑hash url，直接navigate<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> id = <span class="number">12</span>;</div><div class="line"><span class="keyword">var</span> name = <span class="string">'帆布鞋'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> url = <span class="string">'main/module/crud/~id='</span> + id + <span class="string">'&amp;name='</span>+ name;</div><div class="line">router.navigate(url, config);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这些情况处理逻辑各不相同，有些可以很方便的对参数做encodeURIComponent，有些情况却不容易做，比如第一种通过模板生成a标签的方式。因此统一出口逻辑很重要，比如在全局router下定义一个function nav(){} 用来执行所有通过hash路由导航的功能：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nav</span>(<span class="params">url, params, navConfig</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> hash = url + <span class="string">'~'</span>,</div><div class="line">	    paramsArray = [];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> params)&#123;</div><div class="line">		<span class="keyword">if</span>(params.hasOwnProperty(e))&#123;</div><div class="line">			paramsArray.push(e + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[e]));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	hash = hash + paramsArray.join(<span class="string">'&amp;'</span>);</div><div class="line">	<span class="keyword">this</span>.navigate(hash, navConfig || <span class="keyword">this</span>.navConfig);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述方法对所有的参数统一采用url encode，再放到url的hash里，理论上讲只要通过这种方式来路由，可以避免上文提到的参数解析问题，实际的URL可能是这样：<br><a href="http://hao.a.com/init.action#main/page/crud/~id=12&amp;name=%25E6%25B5%258B%25E8%25AF%2595%25E6%258E%25A8%25E5%25B9%25BF%25E8%25AE%25A1%25E5%2588%2592!%2540%2523%2524%2523%2523%2524%255E%2525%2526%2524%2525%2526%2523%2525%255E%2526%2523%2525%255E%2523%2526*%2525" target="_blank" rel="external">http://hao.a.com/init.action#main/page/crud/~id=12&amp;name=%25E6%25B5%258B%25E8%25AF%2595%25E6%258E%25A8%25E5%25B9%25BF%25E8%25AE%25A1%25E5%2588%2592!%2540%2523%2524%2523%2523%2524%255E%2525%2526%2524%2525%2526%2523%2525%255E%2526%2523%2525%255E%2523%2526*%2525</a></p>
<p>通过解析/~后面的参数字符串，先分割，再decode，理论上可以正确拿到各个参数值，比如下面的parseParams方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseParam</span>(<span class="params">param</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> p = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span>(!param)&#123;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">  &#125;</div><div class="line">  param = param.split(<span class="string">'&amp;'</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; param.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> kv = param[i].split(<span class="string">'='</span>);</div><div class="line">    p[kv[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(kv[<span class="number">1</span>]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题看似已经完美的解决了，实际环境中一跑，发现仍然无法正常解析。什么原因呢？通过debug发现，backbone在navigate函数里，对hash做了一些处理，如下图的_extractParameters方法</p>
<p><img src="https://github.com/shanggqm/blog/blob/master/asset/image/20150827_paper1_1.png" alt="_extractParameters" title="_extractParameters"></p>
<p>这个方法对自定义hash结构中的参数做了decodeURIComponent的解码操作，如下图所示：</p>
<p><img src="https://github.com/shanggqm/blog/blob/master/asset/image/20150827_paper1_2.png" alt="backbone" title="backbone"></p>
<p>所以实际上，在Backbone Router里设置的自定义路由参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">routers:&#123;</div><div class="line">  <span class="string">'main/:module/(:crud/)(~:param)'</span>: <span class="string">'main'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>中的param解析后就是已经解码过的参数：<br><a href="http://hao.a.com/init.action#main/module/crud/~id=131201&amp;name=特殊字符@#$##$^%&amp;$%&amp;#%^&amp;#%^#&amp;*%" target="_blank" rel="external">http://hao.a.com/init.action#main/module/crud/~id=131201&amp;name=特殊字符@#$##$^%&amp;$%&amp;#%^&amp;#%^#&amp;*%</a><br>此时再对/~后面的param做parseParam分割就会出错，因为name中包含了’&amp;’字符。</p>
<p>问题找到了，解决的方法也很简单，在navigate的时候，对参数做两次encodeURIComponent即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nav</span>(<span class="params">url, params, navConfig</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> hash = url + <span class="string">'~'</span>,</div><div class="line">	    paramsArray = [];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> params)&#123;</div><div class="line">		<span class="keyword">if</span>(params.hasOwnProperty(e))&#123;</div><div class="line">			paramsArray.push(e + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">encodeURIComponent</span>(params[e])));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	hash = hash + paramsArray.join(<span class="string">'&amp;'</span>);</div><div class="line">	<span class="keyword">this</span>.navigate(hash, navConfig || <span class="keyword">this</span>.navConfig);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul>
<li>实际开发的时候，为了杜绝上述问题的再次发生，最好从规范层面来解决，不允许直接通过模板的方式给a标签设置hash url。统一采用js捕获点击事件来执行nav操作。</li>
<li>对于这种和底层框架相关、具备通用性的问题，最好在底层解决，不要放到业务代码层面去自己encode。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在SPA单页面架构中，通过hash传递name, desc这种UGC字段时，因为无法控制特殊字符导致在解析hash后面的参数
    
    </summary>
    
    
      <category term="SPA" scheme="http://yoursite.com/tags/SPA/"/>
    
      <category term="经验" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>babel6默认添加use strict引发的问题和解决方案</title>
    <link href="http://yoursite.com/2015/08/21/babel6-use-strict/"/>
    <id>http://yoursite.com/2015/08/21/babel6-use-strict/</id>
    <published>2015-08-21T02:34:12.000Z</published>
    <updated>2016-12-12T09:02:26.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们有一个遗留系统，其中所有模块全部按照非strict模式，使用ES5语法书写。现在系统中新增一个全新的模块，我们希望能在这个新模块中引入ES2015语法来书写代码，因此引入了babel编译器来实现ES2015-&gt; ES5的翻译，babel的版本是6.*。</p>
<p>在一次测试的时候我们发现Firefox的控制台报了这样一个错误：</p>
<pre><code>TypeError: access to strict mode caller function is censored
</code></pre><p>字面意思就是在<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="external">严格模式(strict mode)</a>下使用了caller，这个不符合strict mode的要求，所以报错。</p>
<p>实际上，我们在书写ES2015模块时的确显式地在模块开始的第一行声明了:</p>
<pre><code>&apos;use strict&apos;;
</code></pre><p>这些ES2015的模块里引用了一个遗留模块Ajax模块，这个模块里使用了caller这种写法,因此报错。</p>
<a id="more"></a>
<h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>本以为是新增的ES2015模块声明的use strict的问题，直接删掉就可以解决问题，结果发现删掉后问题依旧，因此怀疑是否是Babel在转换时动了手脚。</p>
<p>因为项目中使用了Webpack来做构建，引入了babel-loader来做转换，所以通过看构建后的源码发现，虽然刚才手动删掉了自己写的’use strict’,但是构建时又被自动的加上了。因此基本可以定位是babel搞的鬼。</p>
<p>google查了一下 关键字： babel use strict，找到这样一个页面：<a href="http://stackoverflow.com/questions/33821312/how-to-remove-global-use-strict-added-by-babel" target="_blank" rel="external">How to remove global “use strict” added by babel</a></p>
<p>其中给出了问题和解决方案：<br>问题的原因是babel的es2015预设中默认使用了<a href="https://babeljs.io/docs/plugins/transform-strict-mode/" target="_blank" rel="external">babel-plugin-transform-strict-mode</a>，为所有模块自动加上<strong>‘use strict’</strong>， 所以才有了上面的问题。</p>
<p>解决方案当然也呼之欲出：<br>对于Babel5有一种特殊的解决方案：</p>
<pre><code>//在.babelrc文件中加入这样一行配置：
blacklist: [&quot;useStrict&quot;]
</code></pre><p>但是在Babel6中这个方案不生效，构建时会报错：</p>
<pre><code>Module build failed: ReferenceError: 
[BABEL] E:\workspaces\branches\bundler\myapp\src\main\webapp\app.es6.js: Using removed Babel 5 option: 
E:\workspaces\branches\bundler\myapp\src\main\webapp\.babelrc.blacklist - 
Put the specific transforms you want in the `plugins` option
</code></pre><p>问题很明显，Babel6已经不支持blacklist这个option了，所以问题的答主给了一个babel6的解决方案：</p>
<p>因为babel给所有模块自动加’use strict’是通过<a href="https://babeljs.io/docs/plugins/transform-strict-mode/" target="_blank" rel="external">babel-plugin-transform-strict-mode</a>这个插件加的，因此在配置babel的时候不要使用es2015 的preset，自己手动指定plugins列表，把这个plugin排除在外不引进来就可以了。</p>
<p>查阅ES2015的preset发现压根没有这个plugins，在工程里的node_modules下搜索了一下，发现这个plugin是从<a href="http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/" target="_blank" rel="external">transform-es2015-modules-commonjs</a>这个插件里引入的。</p>
<p>至此终于定位到问题的根源了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由于无法限制ES2015模块依赖ES5的模块，所以理论上来说，只要是在ES2015模块里加了use strict，都会存在潜在的风险。所以最好的方式是去掉这个插件，或者再用一个插件移除掉所有的use strict，这样保证所有代码都在非严格模式下执行即可。</p>
<p>第一个方案显然是不靠谱了，除非不写import，否则必须要引入<a href="http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/" target="_blank" rel="external">transform-es2015-modules-commonjs</a>插件来做ES2015 -&gt; commonJS Module 的转换，而引入了这个插件，就必须要引入<a href="https://babeljs.io/docs/plugins/transform-strict-mode/" target="_blank" rel="external">babel-plugin-transform-strict-mode</a>插件，这个很难在配置层面做到限制。</p>
<p>所以只能转向第二个方案：再写一个babel插件把所有的use strict干掉就可以了。习惯性地上github上搜索了一下，居然还真搜到了一个包：<a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="external">babel-plugin-transform-remove-strict-mode</a>。果真是万能的Github！！！</p>
<p>粗略的看了下源码：</p>
<pre><code>exports[&quot;default&quot;] = function () {
    return {
        visitor: {
            Program: {
                exit: function exit(path) {
                    var list = path.node.directives;
                    for(var i=list.length-1, it; i&gt;=0 ; i--){
                        it = list[i];
                        if (it.value.value===&apos;use strict&apos;){
                            list.splice(i,1);
                        }
                    }
                }

            }
        }
    };
};

module.exports = exports[&quot;default&quot;];
</code></pre><p>再对比了一下<a href="https://babeljs.io/docs/plugins/transform-strict-mode/" target="_blank" rel="external">babel-plugin-transform-strict-mode</a>的源码：</p>
<pre><code>import * as t from &quot;babel-types&quot;;

export default function () {
      return {
        visitor: {
          Program(path, state) {
            if (state.opts.strict === false) return;

            let { node } = path;

            for (let directive of (node.directives: Array&lt;Object&gt;)) {
              if (directive.value.value === &quot;use strict&quot;) return;
            }

            path.unshiftContainer(&quot;directives&quot;, t.directive(t.directiveLiteral(&quot;use strict&quot;)));
          }
        }
      };
}
</code></pre><p>源码我就不解读了，自己看吧。</p>
<p>确认无误后，在package.json文件中的devDependencies中加入</p>
<pre><code>&quot;babel-plugin-transform-remove-strict-mode&quot;:&quot;0.0.2&quot;
</code></pre><p>然后在.babelrc文件中新增配置：</p>
<pre><code>{ 
  &quot;presets&quot;: [
    &quot;es2015&quot;
  ] ,
  &quot;plugins&quot;:[
    &quot;transform-runtime&quot;,
    //下面这行
    &quot;transform-remove-strict-mode&quot;
  ]
}
</code></pre><p>就把问题搞定了。</p>
<h2 id="其他尚未确认的问题"><a href="#其他尚未确认的问题" class="headerlink" title="其他尚未确认的问题"></a>其他尚未确认的问题</h2><ul>
<li>这个问题仅出现在firefox中，chrome中并未出现，至于是何原因，仍未深究，有兴趣的同学可以继续深挖一下。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;我们有一个遗留系统，其中所有模块全部按照非strict模式，使用ES5语法书写。现在系统中新增一个全新的模块，我们希望能在这个新模块中引入ES2015语法来书写代码，因此引入了babel编译器来实现ES2015-&amp;gt; ES5的翻译，babel的版本是6.*。&lt;/p&gt;
&lt;p&gt;在一次测试的时候我们发现Firefox的控制台报了这样一个错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError: access to strict mode caller function is censored
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字面意思就是在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;严格模式(strict mode)&lt;/a&gt;下使用了caller，这个不符合strict mode的要求，所以报错。&lt;/p&gt;
&lt;p&gt;实际上，我们在书写ES2015模块时的确显式地在模块开始的第一行声明了:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;apos;use strict&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些ES2015的模块里引用了一个遗留模块Ajax模块，这个模块里使用了caller这种写法,因此报错。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="babel" scheme="http://yoursite.com/tags/babel/"/>
    
  </entry>
  
</feed>
